// Generated by gencpp from file plot_tool/PlotPoseResponse.msg
// DO NOT EDIT!


#ifndef PLOT_TOOL_MESSAGE_PLOTPOSERESPONSE_H
#define PLOT_TOOL_MESSAGE_PLOTPOSERESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace plot_tool
{
template <class ContainerAllocator>
struct PlotPoseResponse_
{
  typedef PlotPoseResponse_<ContainerAllocator> Type;

  PlotPoseResponse_()
    {
    }
  PlotPoseResponse_(const ContainerAllocator& _alloc)
    {
  (void)_alloc;
    }







  typedef boost::shared_ptr< ::plot_tool::PlotPoseResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::plot_tool::PlotPoseResponse_<ContainerAllocator> const> ConstPtr;

}; // struct PlotPoseResponse_

typedef ::plot_tool::PlotPoseResponse_<std::allocator<void> > PlotPoseResponse;

typedef boost::shared_ptr< ::plot_tool::PlotPoseResponse > PlotPoseResponsePtr;
typedef boost::shared_ptr< ::plot_tool::PlotPoseResponse const> PlotPoseResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::plot_tool::PlotPoseResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::plot_tool::PlotPoseResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


} // namespace plot_tool

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::plot_tool::PlotPoseResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::plot_tool::PlotPoseResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::plot_tool::PlotPoseResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::plot_tool::PlotPoseResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::plot_tool::PlotPoseResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::plot_tool::PlotPoseResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::plot_tool::PlotPoseResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const ::plot_tool::PlotPoseResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::plot_tool::PlotPoseResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "plot_tool/PlotPoseResponse";
  }

  static const char* value(const ::plot_tool::PlotPoseResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::plot_tool::PlotPoseResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
;
  }

  static const char* value(const ::plot_tool::PlotPoseResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::plot_tool::PlotPoseResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream&, T)
    {}

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PlotPoseResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::plot_tool::PlotPoseResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream&, const std::string&, const ::plot_tool::PlotPoseResponse_<ContainerAllocator>&)
  {}
};

} // namespace message_operations
} // namespace ros

#endif // PLOT_TOOL_MESSAGE_PLOTPOSERESPONSE_H
