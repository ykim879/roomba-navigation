// Generated by gencpp from file plot_tool/PlotPathRequest.msg
// DO NOT EDIT!


#ifndef PLOT_TOOL_MESSAGE_PLOTPATHREQUEST_H
#define PLOT_TOOL_MESSAGE_PLOTPATHREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <nav_msgs/Path.h>

namespace plot_tool
{
template <class ContainerAllocator>
struct PlotPathRequest_
{
  typedef PlotPathRequest_<ContainerAllocator> Type;

  PlotPathRequest_()
    : msg()
    , series(0)
    , append(false)
    , symbol(0)
    , symbol_size(0)  {
    }
  PlotPathRequest_(const ContainerAllocator& _alloc)
    : msg(_alloc)
    , series(0)
    , append(false)
    , symbol(0)
    , symbol_size(0)  {
  (void)_alloc;
    }



   typedef  ::nav_msgs::Path_<ContainerAllocator>  _msg_type;
  _msg_type msg;

   typedef uint32_t _series_type;
  _series_type series;

   typedef uint8_t _append_type;
  _append_type append;

   typedef uint8_t _symbol_type;
  _symbol_type symbol;

   typedef uint32_t _symbol_size_type;
  _symbol_size_type symbol_size;





  typedef boost::shared_ptr< ::plot_tool::PlotPathRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::plot_tool::PlotPathRequest_<ContainerAllocator> const> ConstPtr;

}; // struct PlotPathRequest_

typedef ::plot_tool::PlotPathRequest_<std::allocator<void> > PlotPathRequest;

typedef boost::shared_ptr< ::plot_tool::PlotPathRequest > PlotPathRequestPtr;
typedef boost::shared_ptr< ::plot_tool::PlotPathRequest const> PlotPathRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::plot_tool::PlotPathRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::plot_tool::PlotPathRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::plot_tool::PlotPathRequest_<ContainerAllocator1> & lhs, const ::plot_tool::PlotPathRequest_<ContainerAllocator2> & rhs)
{
  return lhs.msg == rhs.msg &&
    lhs.series == rhs.series &&
    lhs.append == rhs.append &&
    lhs.symbol == rhs.symbol &&
    lhs.symbol_size == rhs.symbol_size;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::plot_tool::PlotPathRequest_<ContainerAllocator1> & lhs, const ::plot_tool::PlotPathRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace plot_tool

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::plot_tool::PlotPathRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::plot_tool::PlotPathRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::plot_tool::PlotPathRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::plot_tool::PlotPathRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::plot_tool::PlotPathRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::plot_tool::PlotPathRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::plot_tool::PlotPathRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "11f01eca6b922e1051e9a725443a07ad";
  }

  static const char* value(const ::plot_tool::PlotPathRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x11f01eca6b922e10ULL;
  static const uint64_t static_value2 = 0x51e9a725443a07adULL;
};

template<class ContainerAllocator>
struct DataType< ::plot_tool::PlotPathRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "plot_tool/PlotPathRequest";
  }

  static const char* value(const ::plot_tool::PlotPathRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::plot_tool::PlotPathRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#request fields\n"
"nav_msgs/Path msg\n"
"uint32 series\n"
"bool append\n"
"char symbol\n"
"uint32 symbol_size\n"
"\n"
"================================================================================\n"
"MSG: nav_msgs/Path\n"
"#An array of poses that represents a Path for a robot to follow\n"
"Header header\n"
"geometry_msgs/PoseStamped[] poses\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseStamped\n"
"# A Pose with reference coordinate frame and timestamp\n"
"Header header\n"
"Pose pose\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::plot_tool::PlotPathRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::plot_tool::PlotPathRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.msg);
      stream.next(m.series);
      stream.next(m.append);
      stream.next(m.symbol);
      stream.next(m.symbol_size);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PlotPathRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::plot_tool::PlotPathRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::plot_tool::PlotPathRequest_<ContainerAllocator>& v)
  {
    s << indent << "msg: ";
    s << std::endl;
    Printer< ::nav_msgs::Path_<ContainerAllocator> >::stream(s, indent + "  ", v.msg);
    s << indent << "series: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.series);
    s << indent << "append: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.append);
    s << indent << "symbol: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.symbol);
    s << indent << "symbol_size: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.symbol_size);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLOT_TOOL_MESSAGE_PLOTPATHREQUEST_H
