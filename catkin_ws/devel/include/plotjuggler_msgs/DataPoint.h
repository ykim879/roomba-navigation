// Generated by gencpp from file plotjuggler_msgs/DataPoint.msg
// DO NOT EDIT!


#ifndef PLOTJUGGLER_MSGS_MESSAGE_DATAPOINT_H
#define PLOTJUGGLER_MSGS_MESSAGE_DATAPOINT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace plotjuggler_msgs
{
template <class ContainerAllocator>
struct DataPoint_
{
  typedef DataPoint_<ContainerAllocator> Type;

  DataPoint_()
    : name_index(0)
    , stamp(0.0)
    , value(0.0)  {
    }
  DataPoint_(const ContainerAllocator& _alloc)
    : name_index(0)
    , stamp(0.0)
    , value(0.0)  {
  (void)_alloc;
    }



   typedef uint16_t _name_index_type;
  _name_index_type name_index;

   typedef double _stamp_type;
  _stamp_type stamp;

   typedef double _value_type;
  _value_type value;





  typedef boost::shared_ptr< ::plotjuggler_msgs::DataPoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::plotjuggler_msgs::DataPoint_<ContainerAllocator> const> ConstPtr;

}; // struct DataPoint_

typedef ::plotjuggler_msgs::DataPoint_<std::allocator<void> > DataPoint;

typedef boost::shared_ptr< ::plotjuggler_msgs::DataPoint > DataPointPtr;
typedef boost::shared_ptr< ::plotjuggler_msgs::DataPoint const> DataPointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::plotjuggler_msgs::DataPoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::plotjuggler_msgs::DataPoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::plotjuggler_msgs::DataPoint_<ContainerAllocator1> & lhs, const ::plotjuggler_msgs::DataPoint_<ContainerAllocator2> & rhs)
{
  return lhs.name_index == rhs.name_index &&
    lhs.stamp == rhs.stamp &&
    lhs.value == rhs.value;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::plotjuggler_msgs::DataPoint_<ContainerAllocator1> & lhs, const ::plotjuggler_msgs::DataPoint_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace plotjuggler_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::plotjuggler_msgs::DataPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::plotjuggler_msgs::DataPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::plotjuggler_msgs::DataPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::plotjuggler_msgs::DataPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::plotjuggler_msgs::DataPoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::plotjuggler_msgs::DataPoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::plotjuggler_msgs::DataPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "580ca7c40f92b9a6ab4b921c02ebcd28";
  }

  static const char* value(const ::plotjuggler_msgs::DataPoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x580ca7c40f92b9a6ULL;
  static const uint64_t static_value2 = 0xab4b921c02ebcd28ULL;
};

template<class ContainerAllocator>
struct DataType< ::plotjuggler_msgs::DataPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "plotjuggler_msgs/DataPoint";
  }

  static const char* value(const ::plotjuggler_msgs::DataPoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::plotjuggler_msgs::DataPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 name_index\n"
"float64 stamp\n"
"float64 value\n"
;
  }

  static const char* value(const ::plotjuggler_msgs::DataPoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::plotjuggler_msgs::DataPoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name_index);
      stream.next(m.stamp);
      stream.next(m.value);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DataPoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::plotjuggler_msgs::DataPoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::plotjuggler_msgs::DataPoint_<ContainerAllocator>& v)
  {
    s << indent << "name_index: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.name_index);
    s << indent << "stamp: ";
    Printer<double>::stream(s, indent + "  ", v.stamp);
    s << indent << "value: ";
    Printer<double>::stream(s, indent + "  ", v.value);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLOTJUGGLER_MSGS_MESSAGE_DATAPOINT_H
