// Generated by gencpp from file plotjuggler_msgs/Dictionary.msg
// DO NOT EDIT!


#ifndef PLOTJUGGLER_MSGS_MESSAGE_DICTIONARY_H
#define PLOTJUGGLER_MSGS_MESSAGE_DICTIONARY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace plotjuggler_msgs
{
template <class ContainerAllocator>
struct Dictionary_
{
  typedef Dictionary_<ContainerAllocator> Type;

  Dictionary_()
    : dictionary_uuid(0)
    , names()  {
    }
  Dictionary_(const ContainerAllocator& _alloc)
    : dictionary_uuid(0)
    , names(_alloc)  {
  (void)_alloc;
    }



   typedef uint32_t _dictionary_uuid_type;
  _dictionary_uuid_type dictionary_uuid;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _names_type;
  _names_type names;





  typedef boost::shared_ptr< ::plotjuggler_msgs::Dictionary_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::plotjuggler_msgs::Dictionary_<ContainerAllocator> const> ConstPtr;

}; // struct Dictionary_

typedef ::plotjuggler_msgs::Dictionary_<std::allocator<void> > Dictionary;

typedef boost::shared_ptr< ::plotjuggler_msgs::Dictionary > DictionaryPtr;
typedef boost::shared_ptr< ::plotjuggler_msgs::Dictionary const> DictionaryConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::plotjuggler_msgs::Dictionary_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::plotjuggler_msgs::Dictionary_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::plotjuggler_msgs::Dictionary_<ContainerAllocator1> & lhs, const ::plotjuggler_msgs::Dictionary_<ContainerAllocator2> & rhs)
{
  return lhs.dictionary_uuid == rhs.dictionary_uuid &&
    lhs.names == rhs.names;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::plotjuggler_msgs::Dictionary_<ContainerAllocator1> & lhs, const ::plotjuggler_msgs::Dictionary_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace plotjuggler_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::plotjuggler_msgs::Dictionary_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::plotjuggler_msgs::Dictionary_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::plotjuggler_msgs::Dictionary_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::plotjuggler_msgs::Dictionary_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::plotjuggler_msgs::Dictionary_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::plotjuggler_msgs::Dictionary_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::plotjuggler_msgs::Dictionary_<ContainerAllocator> >
{
  static const char* value()
  {
    return "12d13553d8d6a9826829b71cac454ebe";
  }

  static const char* value(const ::plotjuggler_msgs::Dictionary_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x12d13553d8d6a982ULL;
  static const uint64_t static_value2 = 0x6829b71cac454ebeULL;
};

template<class ContainerAllocator>
struct DataType< ::plotjuggler_msgs::Dictionary_<ContainerAllocator> >
{
  static const char* value()
  {
    return "plotjuggler_msgs/Dictionary";
  }

  static const char* value(const ::plotjuggler_msgs::Dictionary_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::plotjuggler_msgs::Dictionary_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 dictionary_uuid\n"
"string[] names\n"
;
  }

  static const char* value(const ::plotjuggler_msgs::Dictionary_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::plotjuggler_msgs::Dictionary_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.dictionary_uuid);
      stream.next(m.names);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Dictionary_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::plotjuggler_msgs::Dictionary_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::plotjuggler_msgs::Dictionary_<ContainerAllocator>& v)
  {
    s << indent << "dictionary_uuid: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.dictionary_uuid);
    s << indent << "names[]" << std::endl;
    for (size_t i = 0; i < v.names.size(); ++i)
    {
      s << indent << "  names[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.names[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLOTJUGGLER_MSGS_MESSAGE_DICTIONARY_H
